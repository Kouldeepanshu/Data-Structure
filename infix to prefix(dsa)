include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
 #include <ctype.h>
 
 #define MAX 100
 
 int top = -1;
 char stack[MAX];
 
 
 int isOperator(char c) {
     return (c == '+' || c == '-' || c == '*' || c == '/');
 }
 
 
 int precedence(char c) {
     switch (c) {
         case '+':
         case '-':
             return 1;
         case '*':
         case '/':
             return 2;
     }
     return 0;
 }
 
 void push(char c) {
     if (top == MAX - 1) {
         printf("Stack Overflow\n");
         return;
     }
     stack[++top] = c;
 }
 
 char pop() {
     if (top == -1) {
         printf("Stack Underflow\n");
         return -1;
     }
     return stack[top--];
 }
 
 void infixToPrefix(char* infix, char* prefix) {
     int len = strlen(infix);
     int j = 0;
 
     strrev(infix);
 
     for (int i = 0; i < len; i++) {
         if (infix[i] == '(') {
             infix[i] = ')';
         } else if (infix[i] == ')') {
             infix[i] = '(';
         }
     }
 
     for (int i = 0; i < len; i++) {
         char c = infix[i];
 
         if (isalnum(c)) {
             prefix[j++] = c;
         }
         else if (c == '(') {
             push(c);
         }
         else if (c == ')') {
             while (top != -1 && stack[top] != '(') {
                 prefix[j++] = pop();
             }
             pop();   
         }
         else {
             while (top != -1 && precedence(stack[top]) >= precedence(c)) {
                 prefix[j++] = pop();
             }
             push(c);
         }
     }
 
     while (top != -1) {
         prefix[j++] = pop();
     }
 
     prefix[j] = '\0';
 
    
     strrev(prefix);
 }
 
 int main() {
     char infix[MAX], prefix[MAX];
 
     printf("Enter an infix expression: ");
     gets(infix);
 
     infixToPrefix(infix, prefix);
 
     printf("Prefix expression: %s\n", prefix);
 
     return 0;
 }
